# Generated from /home/dantipov/PycharmProjects/Compilers/Language.g4 by ANTLR 4.5.1
from antlr4 import *
from io import StringIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2\61")
        buf.write("\u016d\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3")
        buf.write("\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t\3\n\3\n\3\n\3\13\3\13\3")
        buf.write("\f\3\f\3\f\3\r\3\r\3\16\3\16\3\17\3\17\3\20\3\20\3\21")
        buf.write("\3\21\3\22\3\22\3\23\3\23\3\24\3\24\3\24\3\25\3\25\3\25")
        buf.write("\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\26\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3\30\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\33\3\33\3\33\3\33\3\33\3\34\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\34\3\35\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3\36")
        buf.write("\3\37\3\37\3\37\3\37\3\37\3 \3 \3 \3 \3!\3!\3!\3!\3!\3")
        buf.write("\"\3\"\3\"\3\"\3\"\3\"\3#\3#\3#\3#\3#\3#\3#\3$\3$\3$\3")
        buf.write("$\3$\3$\3%\3%\3%\3%\3%\3%\3%\3&\3&\5&\u00ef\n&\3&\3&\7")
        buf.write("&\u00f3\n&\f&\16&\u00f6\13&\5&\u00f8\n&\3\'\3\'\7\'\u00fc")
        buf.write("\n\'\f\'\16\'\u00ff\13\'\3\'\3\'\3(\3(\3(\3(\3(\3(\3(")
        buf.write("\3(\3(\5(\u010c\n(\3)\3)\3)\3)\5)\u0112\n)\3)\3)\7)\u0116")
        buf.write("\n)\f)\16)\u0119\13)\5)\u011b\n)\3*\5*\u011e\n*\3*\3*")
        buf.write("\3*\7*\u0123\n*\f*\16*\u0126\13*\5*\u0128\n*\3*\3*\6*")
        buf.write("\u012c\n*\r*\16*\u012d\3+\3+\5+\u0132\n+\3+\3+\3+\7+\u0137")
        buf.write("\n+\f+\16+\u013a\13+\5+\u013c\n+\3+\3+\6+\u0140\n+\r+")
        buf.write("\16+\u0141\3,\3,\3,\3,\3,\3,\3,\3,\3,\5,\u014d\n,\3-\3")
        buf.write("-\7-\u0151\n-\f-\16-\u0154\13-\3.\3.\7.\u0158\n.\f.\16")
        buf.write(".\u015b\13.\3/\3/\7/\u015f\n/\f/\16/\u0162\13/\3/\5/\u0165")
        buf.write("\n/\3\60\6\60\u0168\n\60\r\60\16\60\u0169\3\60\3\60\2")
        buf.write("\2\61\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27")
        buf.write("\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30")
        buf.write("/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'")
        buf.write("M(O)Q*S+U,W-Y.[/]\60_\61\3\2\r\3\2//\3\2\63;\3\2\62;\3")
        buf.write("\2$$\4\2>>@@\3\2c|\6\2\62;C\\aac|\3\2C\\\3\2\f\f\3\3\f")
        buf.write("\f\5\2\13\f\17\17\"\"\u0184\2\3\3\2\2\2\2\5\3\2\2\2\2")
        buf.write("\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3")
        buf.write("\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2")
        buf.write("\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2")
        buf.write("\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2")
        buf.write("\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63")
        buf.write("\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2")
        buf.write("\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2")
        buf.write("\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3")
        buf.write("\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y")
        buf.write("\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\3a\3\2\2\2\5")
        buf.write("c\3\2\2\2\7e\3\2\2\2\tg\3\2\2\2\13i\3\2\2\2\rk\3\2\2\2")
        buf.write("\17m\3\2\2\2\21o\3\2\2\2\23q\3\2\2\2\25t\3\2\2\2\27v\3")
        buf.write("\2\2\2\31y\3\2\2\2\33{\3\2\2\2\35}\3\2\2\2\37\177\3\2")
        buf.write("\2\2!\u0081\3\2\2\2#\u0083\3\2\2\2%\u0085\3\2\2\2\'\u0087")
        buf.write("\3\2\2\2)\u008a\3\2\2\2+\u008f\3\2\2\2-\u0095\3\2\2\2")
        buf.write("/\u009a\3\2\2\2\61\u00a0\3\2\2\2\63\u00a8\3\2\2\2\65\u00af")
        buf.write("\3\2\2\2\67\u00b4\3\2\2\29\u00bb\3\2\2\2;\u00c0\3\2\2")
        buf.write("\2=\u00c4\3\2\2\2?\u00c9\3\2\2\2A\u00cd\3\2\2\2C\u00d2")
        buf.write("\3\2\2\2E\u00d8\3\2\2\2G\u00df\3\2\2\2I\u00e5\3\2\2\2")
        buf.write("K\u00f7\3\2\2\2M\u00f9\3\2\2\2O\u010b\3\2\2\2Q\u011a\3")
        buf.write("\2\2\2S\u011d\3\2\2\2U\u012f\3\2\2\2W\u014c\3\2\2\2Y\u014e")
        buf.write("\3\2\2\2[\u0155\3\2\2\2]\u015c\3\2\2\2_\u0167\3\2\2\2")
        buf.write("ab\7*\2\2b\4\3\2\2\2cd\7+\2\2d\6\3\2\2\2ef\7=\2\2f\b\3")
        buf.write("\2\2\2gh\7.\2\2h\n\3\2\2\2ij\7}\2\2j\f\3\2\2\2kl\7\177")
        buf.write("\2\2l\16\3\2\2\2mn\7?\2\2n\20\3\2\2\2op\7\60\2\2p\22\3")
        buf.write("\2\2\2qr\7~\2\2rs\7~\2\2s\24\3\2\2\2tu\7X\2\2u\26\3\2")
        buf.write("\2\2vw\7(\2\2wx\7(\2\2x\30\3\2\2\2yz\7~\2\2z\32\3\2\2")
        buf.write("\2{|\7#\2\2|\34\3\2\2\2}~\7-\2\2~\36\3\2\2\2\177\u0080")
        buf.write("\7/\2\2\u0080 \3\2\2\2\u0081\u0082\7,\2\2\u0082\"\3\2")
        buf.write("\2\2\u0083\u0084\7\61\2\2\u0084$\3\2\2\2\u0085\u0086\7")
        buf.write("\'\2\2\u0086&\3\2\2\2\u0087\u0088\7k\2\2\u0088\u0089\7")
        buf.write("h\2\2\u0089(\3\2\2\2\u008a\u008b\7g\2\2\u008b\u008c\7")
        buf.write("n\2\2\u008c\u008d\7u\2\2\u008d\u008e\7g\2\2\u008e*\3\2")
        buf.write("\2\2\u008f\u0090\7y\2\2\u0090\u0091\7j\2\2\u0091\u0092")
        buf.write("\7k\2\2\u0092\u0093\7n\2\2\u0093\u0094\7g\2\2\u0094,\3")
        buf.write("\2\2\2\u0095\u0096\7t\2\2\u0096\u0097\7g\2\2\u0097\u0098")
        buf.write("\7c\2\2\u0098\u0099\7f\2\2\u0099.\3\2\2\2\u009a\u009b")
        buf.write("\7y\2\2\u009b\u009c\7t\2\2\u009c\u009d\7k\2\2\u009d\u009e")
        buf.write("\7v\2\2\u009e\u009f\7g\2\2\u009f\60\3\2\2\2\u00a0\u00a1")
        buf.write("\7y\2\2\u00a1\u00a2\7t\2\2\u00a2\u00a3\7k\2\2\u00a3\u00a4")
        buf.write("\7v\2\2\u00a4\u00a5\7g\2\2\u00a5\u00a6\7n\2\2\u00a6\u00a7")
        buf.write("\7p\2\2\u00a7\62\3\2\2\2\u00a8\u00a9\7t\2\2\u00a9\u00aa")
        buf.write("\7g\2\2\u00aa\u00ab\7v\2\2\u00ab\u00ac\7w\2\2\u00ac\u00ad")
        buf.write("\7t\2\2\u00ad\u00ae\7p\2\2\u00ae\64\3\2\2\2\u00af\u00b0")
        buf.write("\7n\2\2\u00b0\u00b1\7q\2\2\u00b1\u00b2\7e\2\2\u00b2\u00b3")
        buf.write("\7m\2\2\u00b3\66\3\2\2\2\u00b4\u00b5\7w\2\2\u00b5\u00b6")
        buf.write("\7p\2\2\u00b6\u00b7\7n\2\2\u00b7\u00b8\7q\2\2\u00b8\u00b9")
        buf.write("\7e\2\2\u00b9\u00ba\7m\2\2\u00ba8\3\2\2\2\u00bb\u00bc")
        buf.write("\7x\2\2\u00bc\u00bd\7q\2\2\u00bd\u00be\7k\2\2\u00be\u00bf")
        buf.write("\7f\2\2\u00bf:\3\2\2\2\u00c0\u00c1\7k\2\2\u00c1\u00c2")
        buf.write("\7p\2\2\u00c2\u00c3\7v\2\2\u00c3<\3\2\2\2\u00c4\u00c5")
        buf.write("\7d\2\2\u00c5\u00c6\7q\2\2\u00c6\u00c7\7q\2\2\u00c7\u00c8")
        buf.write("\7n\2\2\u00c8>\3\2\2\2\u00c9\u00ca\7u\2\2\u00ca\u00cb")
        buf.write("\7v\2\2\u00cb\u00cc\7t\2\2\u00cc@\3\2\2\2\u00cd\u00ce")
        buf.write("\7n\2\2\u00ce\u00cf\7q\2\2\u00cf\u00d0\7p\2\2\u00d0\u00d1")
        buf.write("\7i\2\2\u00d1B\3\2\2\2\u00d2\u00d3\7h\2\2\u00d3\u00d4")
        buf.write("\7n\2\2\u00d4\u00d5\7q\2\2\u00d5\u00d6\7c\2\2\u00d6\u00d7")
        buf.write("\7v\2\2\u00d7D\3\2\2\2\u00d8\u00d9\7f\2\2\u00d9\u00da")
        buf.write("\7q\2\2\u00da\u00db\7w\2\2\u00db\u00dc\7d\2\2\u00dc\u00dd")
        buf.write("\7n\2\2\u00dd\u00de\7g\2\2\u00deF\3\2\2\2\u00df\u00e0")
        buf.write("\7w\2\2\u00e0\u00e1\7p\2\2\u00e1\u00e2\7k\2\2\u00e2\u00e3")
        buf.write("\7q\2\2\u00e3\u00e4\7p\2\2\u00e4H\3\2\2\2\u00e5\u00e6")
        buf.write("\7v\2\2\u00e6\u00e7\7j\2\2\u00e7\u00e8\7t\2\2\u00e8\u00e9")
        buf.write("\7g\2\2\u00e9\u00ea\7c\2\2\u00ea\u00eb\7f\2\2\u00ebJ\3")
        buf.write("\2\2\2\u00ec\u00f8\7\62\2\2\u00ed\u00ef\t\2\2\2\u00ee")
        buf.write("\u00ed\3\2\2\2\u00ee\u00ef\3\2\2\2\u00ef\u00f0\3\2\2\2")
        buf.write("\u00f0\u00f4\t\3\2\2\u00f1\u00f3\t\4\2\2\u00f2\u00f1\3")
        buf.write("\2\2\2\u00f3\u00f6\3\2\2\2\u00f4\u00f2\3\2\2\2\u00f4\u00f5")
        buf.write("\3\2\2\2\u00f5\u00f8\3\2\2\2\u00f6\u00f4\3\2\2\2\u00f7")
        buf.write("\u00ec\3\2\2\2\u00f7\u00ee\3\2\2\2\u00f8L\3\2\2\2\u00f9")
        buf.write("\u00fd\7$\2\2\u00fa\u00fc\n\5\2\2\u00fb\u00fa\3\2\2\2")
        buf.write("\u00fc\u00ff\3\2\2\2\u00fd\u00fb\3\2\2\2\u00fd\u00fe\3")
        buf.write("\2\2\2\u00fe\u0100\3\2\2\2\u00ff\u00fd\3\2\2\2\u0100\u0101")
        buf.write("\7$\2\2\u0101N\3\2\2\2\u0102\u0103\7v\2\2\u0103\u0104")
        buf.write("\7t\2\2\u0104\u0105\7w\2\2\u0105\u010c\7g\2\2\u0106\u0107")
        buf.write("\7h\2\2\u0107\u0108\7c\2\2\u0108\u0109\7n\2\2\u0109\u010a")
        buf.write("\7u\2\2\u010a\u010c\7g\2\2\u010b\u0102\3\2\2\2\u010b\u0106")
        buf.write("\3\2\2\2\u010cP\3\2\2\2\u010d\u010e\7n\2\2\u010e\u011b")
        buf.write("\7\62\2\2\u010f\u0111\7n\2\2\u0110\u0112\t\2\2\2\u0111")
        buf.write("\u0110\3\2\2\2\u0111\u0112\3\2\2\2\u0112\u0113\3\2\2\2")
        buf.write("\u0113\u0117\t\3\2\2\u0114\u0116\t\4\2\2\u0115\u0114\3")
        buf.write("\2\2\2\u0116\u0119\3\2\2\2\u0117\u0115\3\2\2\2\u0117\u0118")
        buf.write("\3\2\2\2\u0118\u011b\3\2\2\2\u0119\u0117\3\2\2\2\u011a")
        buf.write("\u010d\3\2\2\2\u011a\u010f\3\2\2\2\u011bR\3\2\2\2\u011c")
        buf.write("\u011e\t\2\2\2\u011d\u011c\3\2\2\2\u011d\u011e\3\2\2\2")
        buf.write("\u011e\u0127\3\2\2\2\u011f\u0128\7\62\2\2\u0120\u0124")
        buf.write("\t\3\2\2\u0121\u0123\t\4\2\2\u0122\u0121\3\2\2\2\u0123")
        buf.write("\u0126\3\2\2\2\u0124\u0122\3\2\2\2\u0124\u0125\3\2\2\2")
        buf.write("\u0125\u0128\3\2\2\2\u0126\u0124\3\2\2\2\u0127\u011f\3")
        buf.write("\2\2\2\u0127\u0120\3\2\2\2\u0128\u0129\3\2\2\2\u0129\u012b")
        buf.write("\7\60\2\2\u012a\u012c\t\4\2\2\u012b\u012a\3\2\2\2\u012c")
        buf.write("\u012d\3\2\2\2\u012d\u012b\3\2\2\2\u012d\u012e\3\2\2\2")
        buf.write("\u012eT\3\2\2\2\u012f\u0131\7f\2\2\u0130\u0132\t\2\2\2")
        buf.write("\u0131\u0130\3\2\2\2\u0131\u0132\3\2\2\2\u0132\u013b\3")
        buf.write("\2\2\2\u0133\u013c\7\62\2\2\u0134\u0138\t\3\2\2\u0135")
        buf.write("\u0137\t\4\2\2\u0136\u0135\3\2\2\2\u0137\u013a\3\2\2\2")
        buf.write("\u0138\u0136\3\2\2\2\u0138\u0139\3\2\2\2\u0139\u013c\3")
        buf.write("\2\2\2\u013a\u0138\3\2\2\2\u013b\u0133\3\2\2\2\u013b\u0134")
        buf.write("\3\2\2\2\u013c\u013d\3\2\2\2\u013d\u013f\7\60\2\2\u013e")
        buf.write("\u0140\t\4\2\2\u013f\u013e\3\2\2\2\u0140\u0141\3\2\2\2")
        buf.write("\u0141\u013f\3\2\2\2\u0141\u0142\3\2\2\2\u0142V\3\2\2")
        buf.write("\2\u0143\u0144\7?\2\2\u0144\u014d\7?\2\2\u0145\u0146\7")
        buf.write("#\2\2\u0146\u014d\7?\2\2\u0147\u014d\t\6\2\2\u0148\u0149")
        buf.write("\7@\2\2\u0149\u014d\7?\2\2\u014a\u014b\7>\2\2\u014b\u014d")
        buf.write("\7?\2\2\u014c\u0143\3\2\2\2\u014c\u0145\3\2\2\2\u014c")
        buf.write("\u0147\3\2\2\2\u014c\u0148\3\2\2\2\u014c\u014a\3\2\2\2")
        buf.write("\u014dX\3\2\2\2\u014e\u0152\t\7\2\2\u014f\u0151\t\b\2")
        buf.write("\2\u0150\u014f\3\2\2\2\u0151\u0154\3\2\2\2\u0152\u0150")
        buf.write("\3\2\2\2\u0152\u0153\3\2\2\2\u0153Z\3\2\2\2\u0154\u0152")
        buf.write("\3\2\2\2\u0155\u0159\t\t\2\2\u0156\u0158\t\b\2\2\u0157")
        buf.write("\u0156\3\2\2\2\u0158\u015b\3\2\2\2\u0159\u0157\3\2\2\2")
        buf.write("\u0159\u015a\3\2\2\2\u015a\\\3\2\2\2\u015b\u0159\3\2\2")
        buf.write("\2\u015c\u0160\7%\2\2\u015d\u015f\n\n\2\2\u015e\u015d")
        buf.write("\3\2\2\2\u015f\u0162\3\2\2\2\u0160\u015e\3\2\2\2\u0160")
        buf.write("\u0161\3\2\2\2\u0161\u0164\3\2\2\2\u0162\u0160\3\2\2\2")
        buf.write("\u0163\u0165\t\13\2\2\u0164\u0163\3\2\2\2\u0165^\3\2\2")
        buf.write("\2\u0166\u0168\t\f\2\2\u0167\u0166\3\2\2\2\u0168\u0169")
        buf.write("\3\2\2\2\u0169\u0167\3\2\2\2\u0169\u016a\3\2\2\2\u016a")
        buf.write("\u016b\3\2\2\2\u016b\u016c\b\60\2\2\u016c`\3\2\2\2\31")
        buf.write("\2\u00ee\u00f4\u00f7\u00fd\u010b\u0111\u0117\u011a\u011d")
        buf.write("\u0124\u0127\u012d\u0131\u0138\u013b\u0141\u014c\u0152")
        buf.write("\u0159\u0160\u0164\u0169\3\b\2\2")
        return buf.getvalue()


class LanguageLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]


    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    VoidType = 28
    IntType = 29
    BoolType = 30
    StringType = 31
    LongType = 32
    FloatType = 33
    DoubleType = 34
    UnionType = 35
    Thread = 36
    Integer = 37
    String = 38
    Bool = 39
    Long = 40
    Float = 41
    Double = 42
    CompOp = 43
    LowerName = 44
    UpperName = 45
    CommentText = 46
    WS = 47

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "';'", "','", "'{'", "'}'", "'='", "'.'", "'||'", 
            "'V'", "'&&'", "'|'", "'!'", "'+'", "'-'", "'*'", "'/'", "'%'", 
            "'if'", "'else'", "'while'", "'read'", "'write'", "'writeln'", 
            "'return'", "'lock'", "'unlock'", "'void'", "'int'", "'bool'", 
            "'str'", "'long'", "'float'", "'double'", "'union'", "'thread'" ]

    symbolicNames = [ "<INVALID>",
            "VoidType", "IntType", "BoolType", "StringType", "LongType", 
            "FloatType", "DoubleType", "UnionType", "Thread", "Integer", 
            "String", "Bool", "Long", "Float", "Double", "CompOp", "LowerName", 
            "UpperName", "CommentText", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "VoidType", "IntType", "BoolType", "StringType", 
                  "LongType", "FloatType", "DoubleType", "UnionType", "Thread", 
                  "Integer", "String", "Bool", "Long", "Float", "Double", 
                  "CompOp", "LowerName", "UpperName", "CommentText", "WS" ]

    grammarFileName = "Language.g4"

    def __init__(self, input=None):
        super().__init__(input)
        self.checkVersion("4.5.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


